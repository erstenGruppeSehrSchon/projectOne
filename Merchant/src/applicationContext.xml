<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/jms
        http://www.springframework.org/schema/jms/spring-jms.xsd">
        
        
        
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<context:component-scan base-package="service,dao,test"></context:component-scan>
	
	<bean id="ds" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="oracle.jdbc.OracleDriver"></property>
		<property name="url" value="jdbc:oracle:thin:@CHEUNAN-W7.corp.oocl.com:1521:xe"></property>
		<property name="password" value="123"></property>
		<property name="username" value="TRAINING"></property>
	</bean>
	
	<bean id="mq" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="failover://tcp://fanch2-2-w7:61616"></property>
		
	</bean>
	
	<!-- Submit new user request --> 
	 <bean id="regQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="RegisterQueue" />
	</bean>
	<!-- Listen to user status update from admin side -->
	<bean id="statusQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="StatusUpdateQueue" />
	</bean>
	<!-- Submit advertisement request -->
	<bean id="advSubmitQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="AdvQueue" />
		
	</bean>
	<!-- Listen to advertisement update from admin side -->
	<bean id="advUpdateQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="AdvQueue" />
		
	</bean>
	
	<bean id="advJMSListener" class="util.AdvJMSListener">
	</bean>
	
	<jms:listener-container connection-factory="mq">     
    	<jms:listener destination="advUpdateQueue" ref="advJMSListener" method="messageReceived" />
	</jms:listener-container>
	
	<bean id="userStatusJMSListener" class="util.UserStatusJMSListener">
	</bean>
	
	<jms:listener-container connection-factory="mq">     
    	<jms:listener destination="statusQueue" ref="userStatusJMSListener" method="messageReceived" />
	</jms:listener-container>

		<!--
		指定实现JPA的适配器，主要作用如下：
		1、取代persistence.xml中的<provider>
		2、指定方言
		3、通知“entityManagerFactory”产生什么样的entityManager
		4、还可以使用EclipseLinkJpaVendorAdapter(Toplink)，openJpaVendorAdapter
	 -->
	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="databasePlatform" value="org.hibernate.dialect.OracleDialect" />
	</bean>
	
	
	<!-- JPA实体管理工厂的配置 使用@PersistenceContext会自动注入EntityManager,可以使用 @PersistenceUnit注入entityManagerFactory -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="ds" />
		<property name="persistenceUnitName" value="em"></property>
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<property name="packagesToScan" value="po" /><!--待扫描的实体类包，不再需要persistence.xml了 -->
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>


	<!-- Jpa 事务配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	<!-- Spring Data Jpa配置 -->
	<!-- <jpa:repositories base-package="dao.impl" transaction-manager-ref="transactionManager" 
		entity-manager-factory-ref="entityManagerFactory"/> -->
	
	<!-- 
		对使用@Transactional的方法启用AOP
		proxy-target-class:表示是否对“目标类”启用代理。true:表示使用cglib方式(类)，false:表示使用Proxy方式（接口）
	
	-->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
	
	

</beans>